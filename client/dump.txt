/*
  // Fetch menu data from backend API
  useEffect(() => {
    const fetchMenu = async () => {
      try {
        const response = await axios.get('http://192.168.0.102:5000/api/menu');
        setDishes(response.data);
      } catch (error) {
        console.error('Error fetching menu data:', error);
      }
    };

    fetchMenu();
  }, []);

  */






  ------------------------------------------------------------------------------------------


  import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../style/HungryHub.css';

const MenuPage = () => {
  const [dishes, setDishes] = useState([]);
  const [order, setOrder] = useState([]);
  const [mobileNumber, setMobileNumber] = useState('');
  const [mobileError, setMobileError] = useState('');
  const [expandedCategories, setExpandedCategories] = useState({});
  const [confirmCategoryChange, setConfirmCategoryChange] = useState(false);
  const [pendingDish, setPendingDish] = useState(null);



  const sendMessage = async () => {
    const botToken = '8090940856:AAGf9lxjAm7opuBnmS0RlwKWEZ2NxkZ7Q9c'; 
    const chatId = '647639463';
    const apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
  
    // Build a message containing the order details
    const orderDetails = order
      .map((dish) => `${dish.name} - â‚¹${dish.price} x ${dish.quantity}`)
      .join('\n');
  
    const message = `ðŸ“‹ *Order Details:*\n${orderDetails}\n\nðŸ’° *Total Amount:* â‚¹${totalAmount}\nðŸ“ž *Mobile Number:* ${mobileNumber}`;
  
    if (!mobileNumber) {
      setMobileError('Please enter your mobile number.');
      return;
    }

    const mobileRegex = /^[0-9]{10}$/;
    if (!mobileRegex.test(mobileNumber)) {
      setMobileError('Invalid mobile number. Please enter a 10-digit number.');
      return;
    }

    setMobileError('');
    
    try {
      const response = await axios.post(apiUrl, {
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown', // Optional: Use Markdown for formatting
      });
  
      if (response.data.ok) {
        alert('Message sent successfully!');
        setOrder([]); // Clear the order after sending the message
        localStorage.removeItem('order');
      } else {
        alert(`Error: ${response.data.description}`);
      }
    } catch (error) {
      alert('Failed to send message: ' + error.message);
    }
  };

  

  useEffect(() => {
    const Dishes = [
      { _id: 1, name: 'Plain Pratha', price: 12.99, category: 'Pratha' },
      { _id: 2, name: 'Aloo Pratha', price: 9.99, category: 'Pratha' },
      { _id: 3, name: 'Aloo Pyaz Pratha', price: 7.99, category: 'Pratha' },
      { _id: 4, name: 'Paneer Pratha', price: 10.99, category: 'Pratha' },
      { _id: 5, name: 'Veg Biryani', price: 15.99, category: 'Biryani' },
      { _id: 6, name: 'Chicken Biryani', price: 19.99, category: 'Biryani' },
    ];

    setDishes(Dishes);
  }, []);

  useEffect(() => {
    const savedOrder = JSON.parse(localStorage.getItem('order'));
    if (savedOrder && Array.isArray(savedOrder)) {
      setOrder(savedOrder);
    }
  }, []);

  useEffect(() => {
    if (order.length > 0) {
      localStorage.setItem('order', JSON.stringify(order));
    }
  }, [order]);

  const groupByCategory = (dishes) => {
    return dishes.reduce((categories, dish) => {
      const { category } = dish;
      if (!categories[category]) {
        categories[category] = [];
      }
      categories[category].push(dish);
      return categories;
    }, {});
  };

  const clearOrder = () => {
    setOrder([]);
    localStorage.removeItem('order');
  };

  const addToOrder = (dish) => {
    const currentCategory = dish.category;
    const differentCategoryExists = order.some((item) => item.category !== currentCategory);

    if (differentCategoryExists) {
      // Save the pending dish and show confirmation modal
      setPendingDish(dish);
      setConfirmCategoryChange(true);
      return;
    }

    finalizeAddToOrder(dish);
  };

  const finalizeAddToOrder = (dish) => {
    const updatedOrder = [...order];
    const existingDishIndex = updatedOrder.findIndex((item) => item._id === dish._id);

    if (existingDishIndex === -1) {
      updatedOrder.push({ ...dish, quantity: 1 });
    } else {
      updatedOrder[existingDishIndex].quantity += 1;
    }

    setOrder(updatedOrder);
    localStorage.setItem('order', JSON.stringify(updatedOrder));
  };

  const handleCategoryChangeConfirm = () => {
    // Clear the order and add the pending dish
    setOrder([{ ...pendingDish, quantity: 1 }]);
    localStorage.setItem('order', JSON.stringify([{ ...pendingDish, quantity: 1 }]));
    setConfirmCategoryChange(false);
    setPendingDish(null);
  };

  const handleCategoryChangeCancel = () => {
    // Close the confirmation modal without clearing the order
    setConfirmCategoryChange(false);
    setPendingDish(null);
  };

  const increaseQuantity = (index) => {
    const updatedOrder = [...order];
    updatedOrder[index].quantity += 1;
    setOrder(updatedOrder);
    localStorage.setItem('order', JSON.stringify(updatedOrder));
  };

  const decreaseQuantity = (index) => {
    const updatedOrder = [...order];
    if (updatedOrder[index].quantity > 1) {
      updatedOrder[index].quantity -= 1;
    } else {
      updatedOrder.splice(index, 1);
    }
    setOrder(updatedOrder);
    localStorage.setItem('order', JSON.stringify(updatedOrder));
  };

  const categorizedDishes = groupByCategory(dishes);
  const totalAmount = order.reduce((total, dish) => total + dish.price * dish.quantity, 0);

 /* const handlePayment = async () => {
    if (!mobileNumber) {
      setMobileError('Please enter your mobile number.');
      return;
    }

    const mobileRegex = /^[0-9]{10}$/;
    if (!mobileRegex.test(mobileNumber)) {
      setMobileError('Invalid mobile number. Please enter a 10-digit number.');
      return;
    }

    setMobileError('');
    try {
      const { data } = await axios.post('http://192.168.0.113:5000/api/paytm/payment', {
        amount: totalAmount,
        mobileNumber,
      });
      const form = document.createElement('form');
      form.method = 'POST';
      form.action = data.PAYTM_TXN_URL;

      Object.keys(data).forEach((key) => {
        if (key !== 'PAYTM_TXN_URL') {
          const input = document.createElement('input');
          input.type = 'hidden';
          input.name = key;
          input.value = data[key];
          form.appendChild(input);
        }
      });
      document.body.appendChild(form);
      form.submit();

      setOrder([]);
      localStorage.removeItem('order');
    } catch (error) {
      console.error('Error in payment request:', error);
    }
  };
*/


  const toggleCategory = (category) => {
    setExpandedCategories((prevState) => ({
      ...prevState,
      [category]: !prevState[category],
    }));
  };

  return (
    <div className="menu-page">
      <h1 className="main-heading">Hungry Hub</h1>
      <p className="sub-heading">Today's top curated menu is here</p>

      {Object.keys(categorizedDishes).map((category) => (
        <div key={category} className="category-section">
          <h2 className="category-heading" onClick={() => toggleCategory(category)}>
            {category}
          </h2>
          {expandedCategories[category] && (
            <div className="menu-items">
              {categorizedDishes[category].map((dish) => (
                <div key={dish._id} className="menu-item">
                  <h3>{dish.name}</h3>
                  <p>Price: â‚¹{dish.price}</p>
                  <button onClick={() => addToOrder(dish)}>Add to Order</button>
                </div>
              ))}
            </div>
          )}
        </div>
      ))}

      <div className="order-summary">
        <div className="order-summary-header">
          <h2 className="order-summary-title">Your Order:</h2>
          <img
            src={require('../images/delete_bucket.png')}
            alt="Delete Order"
            onClick={clearOrder}
            className="delete-icon"
          />
        </div>
        <ul>
          {order.map((dish, index) => (
            <li key={index} className="order-item">
              <p>{dish.name} - â‚¹{dish.price} x {dish.quantity}</p>
              <div className="order-item-actions">
                <button onClick={() => decreaseQuantity(index)} className="action-btn">-</button>
                <span className="quantity">{dish.quantity}</span>
                <button onClick={() => increaseQuantity(index)} className="action-btn">+</button>
              </div>
            </li>
          ))}
        </ul>
        <p>Total: â‚¹{totalAmount}</p>
        <input
          type="text"
          placeholder="Enter your mobile number"
          value={mobileNumber}
          onChange={(e) => setMobileNumber(e.target.value)}
          style={{ padding: '10px', width: '92%', margin: '10px 0', fontSize: '16px' }}
        />
        {mobileError && <p style={{ color: 'red', fontSize: '14px' }}>{mobileError}</p>}
        <button
          /*onClick={handlePayment} */
          onClick={sendMessage}
          disabled={order.length === 0}
          className="make-payment"
          style={{ backgroundColor: order.length === 0 ? '#ddd' : '#28a745', cursor: order.length === 0 ? 'not-allowed' : 'pointer' }}
        >
          Confirm Order â‚¹{totalAmount}
        </button>
      </div>

      {/* Custom Confirmation Modal */}
      {confirmCategoryChange && (
        <div className="confirmation-modal">
          <div className="modal-content">
            <p>
              Your current order contains items from another category. Do you want to clear it and start a new order with "{pendingDish.category}"?
            </p>
            <button onClick={handleCategoryChangeConfirm} className="confirm-btn">
              Yes, Clear and Add
            </button>
            <button onClick={handleCategoryChangeCancel} className="cancel-btn">
              No, Keep Existing Order
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default MenuPage;



===========================================================================================



<div className="hero-overlay">
          <div className="hero-content">
            <h1>Welcome to <span className="highlight">Qwikify.in</span></h1>
            <p className="hero-tagline">Your Local Wiki for All Nearby Services</p>
            <p className="hero-subtagline">Quick, Easy, and Smart!</p>
            <button className="cta-btn" onClick={() => handleNavigation('/menu')}>
              Explore Services
            </button>
          </div>
        </div>


        ==============================================================================



import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../style/HungryHub.css';

const MenuPage = () => {
  const [dishes, setDishes] = useState([]);
  const [order, setOrder] = useState([]);
  const [mobileNumber, setMobileNumber] = useState('');
  const [mobileError, setMobileError] = useState('');
  const [expandedCategories, setExpandedCategories] = useState({});
  const [confirmCategoryChange, setConfirmCategoryChange] = useState(false);
  const [pendingDish, setPendingDish] = useState(null);

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalMessage, setModalMessage] = useState('');
  const [modalType, setModalType] = useState('');




  const sendMessage = async () => {
    const botToken = '8090940856:AAGf9lxjAm7opuBnmS0RlwKWEZ2NxkZ7Q9c';
    const chatId = '647639463';
    const apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;

    // Build a message containing the order details
    const orderDetails = order
      .map((dish) => `${dish.name} - â‚¹${dish.price} x ${dish.quantity}`)
      .join('\n');

    const message = `ðŸ“‹ *Order Details:*\n${orderDetails}\n\nðŸ’° *Total Amount:* â‚¹${totalAmount}\nðŸ“ž *Mobile Number:* ${mobileNumber}`;

    if (!mobileNumber) {
      setMobileError('Please enter your mobile number.');
      return;
    }

    const mobileRegex = /^[0-9]{10}$/;
    if (!mobileRegex.test(mobileNumber)) {
      setMobileError('Invalid mobile number. Please enter a 10-digit number.');
      return;
    }

    setMobileError('');

    localStorage.setItem('mobileNumber', mobileNumber);

    try {
      const response = await axios.post(apiUrl, {
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown', // Optional: Use Markdown for formatting
      });

      if (response.data.ok) {
        setModalMessage('Order placed successfully!');
        setModalType('success');
        setOrder([]); // Clear the order after sending the message
        localStorage.removeItem('order');

        //-----------------------

        const whatsappMessage = encodeURIComponent(
          `ðŸ“‹ Order Details:\n${orderDetails}\n\nðŸ’° Total Amount: â‚¹${totalAmount}\nðŸ“ž Mobile Number: ${mobileNumber}`
        );
        const whatsappUrl = `https://wa.me/917500048079?text=${whatsappMessage}`;
        window.location.href = whatsappUrl;

        //----------------------

      } else {
        setModalMessage(`Failed to place order: ${response.data.description}`);
        setModalType('error');
      }
    } catch (error) {
      setModalMessage('Failed to place order: ' + error.message);
      setModalType('error');
    }

    setIsModalOpen(true); // Show the modal
  };


  useEffect(() => {
    const savedMobileNumber = localStorage.getItem('mobileNumber');
    if (savedMobileNumber) {
      setMobileNumber(savedMobileNumber);
    }
  }, []);



  useEffect(() => {
    const Dishes = [
      { _id: 1, name: 'Plain Pratha', price: 12.99, category: 'Pratha' },
      { _id: 2, name: 'Aloo Pratha', price: 9.99, category: 'Pratha' },
      { _id: 3, name: 'Aloo Pyaz Pratha', price: 7.99, category: 'Pratha' },
      { _id: 4, name: 'Paneer Pratha', price: 10.99, category: 'Pratha' },
      { _id: 5, name: 'Veg Biryani', price: 15.99, category: 'Biryani' },
      { _id: 6, name: 'Chicken Biryani', price: 19.99, category: 'Biryani' },
    ];

    setDishes(Dishes);
  }, []);

  useEffect(() => {
    const savedOrder = JSON.parse(localStorage.getItem('order'));
    if (savedOrder && Array.isArray(savedOrder)) {
      setOrder(savedOrder);
    }
  }, []);

  useEffect(() => {
    if (order.length > 0) {
      localStorage.setItem('order', JSON.stringify(order));
    }
  }, [order]);

  const groupByCategory = (dishes) => {
    return dishes.reduce((categories, dish) => {
      const { category } = dish;
      if (!categories[category]) {
        categories[category] = [];
      }
      categories[category].push(dish);
      return categories;
    }, {});
  };

  const clearOrder = () => {
    setOrder([]);
    localStorage.removeItem('order');
  };

  const addToOrder = (dish) => {
    const currentCategory = dish.category;
    const differentCategoryExists = order.some((item) => item.category !== currentCategory);

    if (differentCategoryExists) {
      // Save the pending dish and show confirmation modal
      setPendingDish(dish);
      setConfirmCategoryChange(true);
      return;
    }

    finalizeAddToOrder(dish);
  };

  const finalizeAddToOrder = (dish) => {
    const updatedOrder = [...order];
    const existingDishIndex = updatedOrder.findIndex((item) => item._id === dish._id);

    if (existingDishIndex === -1) {
      updatedOrder.push({ ...dish, quantity: 1 });
    } else {
      updatedOrder[existingDishIndex].quantity += 1;
    }

    setOrder(updatedOrder);
    localStorage.setItem('order', JSON.stringify(updatedOrder));
  };

  const handleCategoryChangeConfirm = () => {
    // Clear the order and add the pending dish
    setOrder([{ ...pendingDish, quantity: 1 }]);
    localStorage.setItem('order', JSON.stringify([{ ...pendingDish, quantity: 1 }]));
    setConfirmCategoryChange(false);
    setPendingDish(null);
  };

  const handleCategoryChangeCancel = () => {
    // Close the confirmation modal without clearing the order
    setConfirmCategoryChange(false);
    setPendingDish(null);
  };

  const increaseQuantity = (index) => {
    const updatedOrder = [...order];
    updatedOrder[index].quantity += 1;
    setOrder(updatedOrder);
    localStorage.setItem('order', JSON.stringify(updatedOrder));
  };

  const decreaseQuantity = (index) => {
    const updatedOrder = [...order];
    if (updatedOrder[index].quantity > 1) {
      updatedOrder[index].quantity -= 1;
    } else {
      updatedOrder.splice(index, 1);
    }
    setOrder(updatedOrder);
    localStorage.setItem('order', JSON.stringify(updatedOrder));
  };

  const categorizedDishes = groupByCategory(dishes);
  const totalAmount = order.reduce((total, dish) => total + dish.price * dish.quantity, 0);

  /* const handlePayment = async () => {
     if (!mobileNumber) {
       setMobileError('Please enter your mobile number.');
       return;
     }
 
     const mobileRegex = /^[0-9]{10}$/;
     if (!mobileRegex.test(mobileNumber)) {
       setMobileError('Invalid mobile number. Please enter a 10-digit number.');
       return;
     }
 
     setMobileError('');
     try {
       const { data } = await axios.post('http://192.168.0.113:5000/api/paytm/payment', {
         amount: totalAmount,
         mobileNumber,
       });
       const form = document.createElement('form');
       form.method = 'POST';
       form.action = data.PAYTM_TXN_URL;
 
       Object.keys(data).forEach((key) => {
         if (key !== 'PAYTM_TXN_URL') {
           const input = document.createElement('input');
           input.type = 'hidden';
           input.name = key;
           input.value = data[key];
           form.appendChild(input);
         }
       });
       document.body.appendChild(form);
       form.submit();
 
       setOrder([]);
       localStorage.removeItem('order');
     } catch (error) {
       console.error('Error in payment request:', error);
     }
   };
 */


  const toggleCategory = (category) => {
    setExpandedCategories((prevState) => ({
      ...prevState,
      [category]: !prevState[category],
    }));
  };

  return (
    <div className="menu-page">
      <h1 className="main-heading">Welcome to Hungry Hub</h1>
      <p className="sub-heading">Today's top curated menu is here</p>


      {Object.keys(categorizedDishes).map((category) => (
        <div key={category} className="category-section">
          <h2 className="category-heading" onClick={() => toggleCategory(category)}>
            {category}
          </h2>
          {expandedCategories[category] && (
            <div className="menu-items">
              {categorizedDishes[category].map((dish) => (
                <div key={dish._id} className="menu-item">
                  <h3>{dish.name}</h3>
                  <p>Price: â‚¹{dish.price}</p>
                  <button onClick={() => addToOrder(dish)}>Add to Order</button>
                </div>
              ))}
            </div>
          )}
        </div>
      ))}

      <div className="order-summary">
        <div className="order-summary-header">
          <h2 className="order-summary-title">Your Order:</h2>
          <img
            src={require('../images/delete_bucket.png')}
            alt="Delete Order"
            onClick={clearOrder}
            className="delete-icon"
          />
        </div>
        <ul>
          {order.map((dish, index) => (
            <li key={index} className="order-item">
              <p>{dish.name} - â‚¹{dish.price} x {dish.quantity}</p>
              <div className="order-item-actions">
                <button onClick={() => decreaseQuantity(index)} className="action-btn">-</button>
                <span className="quantity">{dish.quantity}</span>
                <button onClick={() => increaseQuantity(index)} className="action-btn">+</button>
              </div>
            </li>
          ))}
        </ul>
        <p style={{ margin: '10px 0', fontSize: '18px', }} >Total: â‚¹{totalAmount}</p>
        <input
          type="text"
          placeholder="Enter your mobile number"
          value={mobileNumber}
          onChange={(e) => setMobileNumber(e.target.value)}
          style={{ padding: '10px', width: '92%', margin: '10px 0', fontSize: '16px' }}
        />
        {mobileError && <p style={{ color: 'red', fontSize: '14px' }}>{mobileError}</p>}
        <button
          /*onClick={handlePayment} */
          onClick={sendMessage}
          disabled={order.length === 0}
          className="make-payment"
          style={{ backgroundColor: order.length === 0 ? '#ddd' : '#E8A941', cursor: order.length === 0 ? 'not-allowed' : 'pointer' }}
        >
          Confirm Order â‚¹{totalAmount}
        </button>
        {isModalOpen && (
          <div className="modal-overlay">
            <div className="modal-content">
              <p
                style={{
                  color: modalType === 'success' ? 'green' : 'red',
                  fontWeight: 'bold',
                  fontSize: '18px',
                  marginBottom: '20px',
                }}
              >
                {modalMessage}
              </p>
              <button
                onClick={() => setIsModalOpen(false)}
                style={{
                  padding: '10px 20px',
                  backgroundColor: modalType === 'success' ? '#28a745' : '#dc3545',
                  color: 'white',
                  border: 'none',
                  borderRadius: '5px',
                  cursor: 'pointer',
                }}
              >
                Close
              </button>
            </div>
          </div>
        )}

      </div>

      {/* Custom Confirmation Modal */}
      {confirmCategoryChange && (
        <div className="confirmation-modal">
          <div className="modal-content">
            <p>
              Your current order contains items from another category. Do you want to clear it and start a new order with "{pendingDish.category}"?
            </p>
            <button onClick={handleCategoryChangeConfirm} className="confirm-btn">
              Yes, Clear and Add
            </button>
            <button onClick={handleCategoryChangeCancel} className="cancel-btn">
              No, Keep Existing Order
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default MenuPage;



=================================================================


Qwikify.in is a one-stop platform offering a wide range of daily-use services at your fingertips.
 From grocery shopping and food delivery to home maintenance and personal care, Qwikify makes it quick and 
 easy to access essential services anytime, anywhere. Simplifying your everyday tasks, Qwikify ensures 
 convenience, reliability, and speed, all in one app.